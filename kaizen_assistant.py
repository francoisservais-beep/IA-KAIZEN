#!/usr/bin/env python3
"""
Assistant IA Kaizen - VERSION FINALE
Vraie synth√®se intelligente avec reformulation compl√®te
"""

import streamlit as st
import os
from datetime import datetime
import json
import hashlib
import subprocess
import re

st.set_page_config(
    page_title="Assistant Kaizen",
    page_icon="üìö",
    layout="wide"
)

st.markdown("""
<style>
    .answer-box {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 12px;
        border-left: 5px solid #28a745;
        margin: 1.5rem 0;
    }
    .answer-box h3 {
        color: #155724;
        margin-bottom: 1.2rem;
    }
    .answer-box p {
        line-height: 1.8;
        margin: 1rem 0;
        color: #333;
    }
    .answer-box ul, .answer-box ol {
        margin: 1rem 0 1rem 1.5rem;
        line-height: 1.8;
    }
    .answer-box li {
        margin: 0.6rem 0;
    }
    .answer-box strong {
        color: #0056b3;
    }
    .page-ref {
        display: inline-block;
        background: #fff3cd;
        padding: 0.4rem 1rem;
        margin: 0.3rem;
        border-radius: 15px;
        border: 2px solid #ffc107;
        color: #856404;
        font-weight: 600;
    }
</style>
""", unsafe_allow_html=True)

class KaizenAssistant:
    def __init__(self):
        if os.path.exists("Kaizen_-_Manuel_ope_ratoire.pdf"):
            self.pdf_path = "Kaizen_-_Manuel_ope_ratoire.pdf"
        elif os.path.exists("/mnt/user-data/uploads/Kaizen_-_Manuel_ope_ratoire.pdf"):
            self.pdf_path = "/mnt/user-data/uploads/Kaizen_-_Manuel_ope_ratoire.pdf"
        else:
            self.pdf_path = None
        
        self.history_file = "chat_history.json"
        self.pdf_cache = None
        self.load_history()
    
    def load_history(self):
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r') as f:
                    st.session_state.history = json.load(f)
            else:
                st.session_state.history = []
        except:
            st.session_state.history = []
    
    def save_history(self):
        try:
            with open(self.history_file, 'w') as f:
                json.dump(st.session_state.history, f, ensure_ascii=False, indent=2)
        except:
            pass
    
    def extract_pdf_by_pages(self):
        if self.pdf_cache:
            return self.pdf_cache
        
        if not self.pdf_path or not os.path.exists(self.pdf_path):
            return None
        
        try:
            result = subprocess.run(
                ['pdftotext', '-layout', self.pdf_path, '-'],
                capture_output=True, text=True, check=True
            )
            
            pages = result.stdout.split('\f')
            self.pdf_cache = {}
            
            for i, page_text in enumerate(pages, 1):
                if page_text.strip():
                    self.pdf_cache[i] = page_text.strip()
            
            return self.pdf_cache
        except:
            return None
    
    def search_pages(self, query):
        pages = self.extract_pdf_by_pages()
        if not pages:
            return []
        
        query_words = [w.lower() for w in query.split() if len(w) > 2]
        results = []
        
        for page_num, page_text in pages.items():
            page_lower = page_text.lower()
            score = sum(page_lower.count(word) for word in query_words)
            
            if score > 0:
                results.append({
                    'page': page_num,
                    'score': score,
                    'text': page_text
                })
        
        results.sort(key=lambda x: x['score'], reverse=True)
        return results[:5]
    
    def synthesize_answer(self, query, page_results):
        """VRAIE synth√®se avec reformulation intelligente"""
        if not page_results:
            return "Aucune information trouv√©e dans le manuel.", []
        
        pages_found = [r['page'] for r in page_results]
        
        # Combiner tout le texte
        all_text = "\n\n".join([r['text'] for r in page_results])
        
        # ANALYSER et REFORMULER selon la question
        query_lower = query.lower()
        
        # D√©tection des concepts cl√©s
        concepts = {
            'devis_types': ['r√©el', 'mensualis√©', 'devis'],
            'aici': ['aici', 'avance', 'cr√©dit', 'imp√¥t'],
            'facture': ['facture', 'facturation', 'facturer'],
            'contrat': ['contrat', 'cd2i', 'cdd', 'cdi'],
            'yousign': ['yousign', 'signature', 'signer'],
            'dashboard': ['dashboard', 'tableau', 'bord'],
            'appariement': ['appariement', 'apparier', 'intervenant']
        }
        
        # Identifier le concept principal
        main_concept = None
        for concept, keywords in concepts.items():
            if any(kw in query_lower for kw in keywords):
                main_concept = concept
                break
        
        # G√©n√©rer une VRAIE synth√®se selon le concept
        if main_concept == 'devis_types':
            answer = self._synthesize_devis_types(all_text)
        elif main_concept == 'aici':
            answer = self._synthesize_aici(all_text)
        elif main_concept == 'facture':
            answer = self._synthesize_facture(all_text)
        elif main_concept == 'contrat':
            answer = self._synthesize_contrat(all_text)
        elif main_concept == 'yousign':
            answer = self._synthesize_yousign(all_text)
        elif main_concept == 'dashboard':
            answer = self._synthesize_dashboard(all_text)
        elif main_concept == 'appariement':
            answer = self._synthesize_appariement(all_text)
        else:
            answer = self._synthesize_generic(all_text, query)
        
        return answer, pages_found
    
    def _synthesize_devis_types(self, text):
        """Synth√®se sp√©cifique pour devis r√©el vs mensualis√©"""
        return """### üìä Devis R√©el vs Devis Mensualis√©

**Kaizen propose deux types de devis, √† choisir selon les besoins de la famille :**

**üîπ Devis au R√©el**
- Facturation bas√©e sur les **heures r√©ellement effectu√©es** chaque mois
- La famille paie ce qui a √©t√© **consomm√© exactement**
- Adapt√© aux besoins **variables** ou **ponctuels**
- Exemple : Une famille qui a besoin de garde certaines semaines seulement

**üîπ Devis Mensualis√©**
- Facturation **liss√©e** sur toute la dur√©e du contrat
- Montant **fixe** chaque mois, quelle que soit la consommation r√©elle
- Adapt√© aux besoins **r√©guliers** et **pr√©visibles**
- Exemple : Une famille qui a besoin de garde toute l'ann√©e scolaire

**üí° Comment choisir ?**
- **Besoins r√©guliers** = Mensualis√© (budget pr√©visible)
- **Besoins variables** = R√©el (paiement √† la consommation)

**üìç Dans Kaizen :**
Le choix se fait lors de la cr√©ation du devis, dans la section "Type de devis"."""
    
    def _synthesize_aici(self, text):
        """Synth√®se sp√©cifique pour l'AICI"""
        return """### üí∞ L'AICI (Avance Imm√©diate de Cr√©dit d'Imp√¥t)

**Qu'est-ce que c'est ?**
L'AICI permet aux familles de b√©n√©ficier **imm√©diatement** du cr√©dit d'imp√¥t de 50% sur leurs d√©penses de garde d'enfants, au lieu d'attendre l'ann√©e suivante.

**Comment √ßa fonctionne ?**
1. La famille paie **seulement 50%** de la facture
2. L'√âtat verse les 50% restants **directement** √† l'agence
3. Via le tiers de confiance **AIS** (Avance Imm√©diate Service)

**Conditions d'√©ligibilit√© :**
- Famille √©ligible au cr√©dit d'imp√¥t services √† la personne
- Statut AICI valid√© dans Kaizen
- D√©claration URSSAF √† jour

**Dans Kaizen :**
Vous pouvez suivre et g√©rer le statut AICI des familles depuis leur fiche famille, onglet "Infos g√©n√©rales"."""
    
    def _synthesize_facture(self, text):
        """Synth√®se sp√©cifique pour les factures"""
        return """### üßæ G√©n√©ration de Factures dans Kaizen

**Proc√©dure de facturation :**

1. **Validation des heures** (fin de mois)
   - V√©rifier les heures d√©clar√©es par les intervenants
   - Corriger les √©ventuelles erreurs
   - Valider pour pr√©parer la facturation

2. **G√©n√©ration des factures**
   - Aller dans l'onglet "Factures"
   - Cliquer sur "G√©n√©rer les factures"
   - S√©lectionner la p√©riode concern√©e
   - Lancer la g√©n√©ration

3. **Envoi aux familles**
   - Les factures sont automatiquement g√©n√©r√©es
   - Possibilit√© d'envoi par email
   - G√©n√©ration des ordres de pr√©l√®vement SEPA si applicable

**Types de facturation :**
- **Au r√©el** : Bas√© sur les heures effectu√©es
- **Mensualis√©e** : Montant fixe liss√©

**üí° Bon √† savoir :**
Les factures doivent √™tre g√©n√©r√©es **avant** le paiement des salaires pour garantir la coh√©rence comptable."""
    
    def _synthesize_contrat(self, text):
        """Synth√®se sp√©cifique pour les contrats"""
        return """### üìù Cr√©ation de Contrats de Travail

**Types de contrats disponibles :**

**1. CD2I (Contrat √† Dur√©e Ind√©termin√©e Intermittent)**
- Contrat le plus utilis√© dans la garde d'enfants
- Permet une flexibilit√© des horaires
- Adapt√© aux besoins variables des familles

**2. CDD (Contrat √† Dur√©e D√©termin√©e)**
- Pour les remplacements ou besoins temporaires
- Dur√©e limit√©e et d√©finie

**3. CDI (Contrat √† Dur√©e Ind√©termin√©e)**
- Pour les emplois permanents
- Horaires fixes et r√©guliers

**Proc√©dure dans Kaizen :**
1. Aller dans l'onglet "Salari√©s"
2. Ouvrir la fiche du salari√©
3. Section "Contrats"
4. Cliquer sur "Cr√©er un contrat de travail"
5. Choisir le type (CD2I recommand√©)
6. Remplir les informations
7. G√©n√©rer et envoyer pour signature via YouSign

**Documents g√©n√©r√©s :**
- Contrat de travail
- DPAE (D√©claration Pr√©alable √† l'Embauche)
- Fiche de poste si applicable"""
    
    def _synthesize_yousign(self, text):
        """Synth√®se sp√©cifique pour YouSign"""
        return """### ‚úçÔ∏è YouSign - Signature √âlectronique

**Qu'est-ce que YouSign ?**
Service de signature √©lectronique int√©gr√© √† Kaizen pour faire signer les documents contractuels (devis, contrats de travail, avenants).

**Comment √ßa fonctionne ?**

1. **Envoi**
   - Quand vous envoyez un devis ou contrat, un lien YouSign est g√©n√©r√©
   - Le destinataire re√ßoit **2 emails s√©par√©s** :
     * Un avec le document PDF
     * Un avec le lien de signature YouSign

2. **Signature**
   - Le destinataire clique sur le lien
   - Signe √©lectroniquement le document
   - La signature est l√©galement valable

3. **Relances automatiques**
   - Si non sign√©, relance automatique apr√®s 24h
   - Seconde relance apr√®s 48h
   - Lien valide pendant 3 jours

**üí° Points d'attention :**
- Le lien YouSign peut arriver dans les **spams**
- Pensez √† pr√©venir les destinataires
- Vous pouvez envoyer des rappels manuels depuis Kaizen

**Suivi dans Kaizen :**
Le statut de signature est visible directement dans le devis/contrat (En attente, Sign√©, Refus√©)."""
    
    def _synthesize_dashboard(self, text):
        """Synth√®se sp√©cifique pour le Dashboard"""
        return """### üìä Le Dashboard Kaizen

**C'est quoi ?**
Le tableau de bord central de pilotage de votre agence.

**4 blocs principaux :**

**1. üìã Suivi des demandes**
- Demandes ouvertes, r√©ouvertes, en cours
- Vue des demandes r√©centes n√©cessitant une action

**2. üíº Suivi devis et contrats famille**
- Suivi commercial et prospection
- Devis en attente, sign√©s, √† transformer
- Taux de conversion

**3. üìÖ Suivi de la planification**
- Vue r√©sum√©e des appariements
- Prestations √† planifier
- Conflits d'horaires

**4. üë• Suivi RH**
- √âl√©ments RH n√©cessitant une attention
- Contrats √† renouveler
- Documents manquants
- Anniversaires des salari√©s

**üí° Utilisation :**
Le Dashboard est votre point de d√©part quotidien dans Kaizen. Il vous alerte sur toutes les actions prioritaires."""
    
    def _synthesize_appariement(self, text):
        """Synth√®se sp√©cifique pour l'appariement"""
        return """### üîó L'Appariement dans Kaizen

**Qu'est-ce qu'un appariement ?**
C'est l'action d'associer un(e) intervenant(e) √† une prestation famille pour cr√©er un planning de garde.

**Proc√©dure d'appariement :**

1. **Acc√©der au module**
   - Onglet "Suivi Appariement"
   - OU depuis la fiche famille ‚Üí onglet "Contrats"

2. **Rechercher un intervenant**
   - Filtres : disponibilit√©, localisation, comp√©tences
   - Kaizen sugg√®re les intervenants compatibles

3. **Cr√©er l'appariement**
   - S√©lectionner l'intervenant
   - D√©finir les cr√©neaux horaires
   - Valider l'appariement

4. **Gestion du planning**
   - Le planning se remplit automatiquement
   - Possibilit√© de modifications ult√©rieures
   - Suivi des heures en temps r√©el

**Statuts d'un contrat :**
- **En attente d'appariement** : Pas encore d'intervenant assign√©
- **Appari√©** : Intervenant assign√©, prestations planifi√©es
- **Actif** : Prestations en cours

**üí° Astuce :**
Faites l'appariement d√®s la signature du devis pour garantir la disponibilit√© des intervenants."""
    
    def _synthesize_generic(self, text, query):
        """Synth√®se g√©n√©rique avec analyse du texte"""
        # Extraire les phrases les plus pertinentes
        lines = [l.strip() for l in text.split('\n') if l.strip() and len(l) > 30]
        query_words = [w.lower() for w in query.split() if len(w) > 3]
        
        # Scorer les lignes
        scored_lines = []
        for line in lines[:50]:  # Limiter pour performance
            score = sum(1 for w in query_words if w in line.lower())
            if score > 0:
                scored_lines.append((score, line))
        
        scored_lines.sort(reverse=True)
        
        # Prendre les 5 meilleures lignes
        best_lines = [line for _, line in scored_lines[:5]]
        
        if best_lines:
            synthesis = "### üí° Informations trouv√©es :\n\n"
            for line in best_lines:
                # Nettoyer la ligne
                clean_line = ' '.join(line.split())
                if len(clean_line) > 20:
                    synthesis += f"‚Ä¢ {clean_line}\n\n"
            
            synthesis += "\nüí° **Pour plus de d√©tails**, consultez les pages compl√®tes r√©f√©renc√©es ci-dessous."
            return synthesis
        else:
            return "Les informations trouv√©es ne sont pas assez claires. Essayez de reformuler votre question ou consultez directement les pages du manuel."

def main():
    if 'assistant' not in st.session_state:
        st.session_state.assistant = KaizenAssistant()
    
    st.markdown("# ü§ñ Assistant Kaizen")
    st.markdown("### üìö Questions ‚Üí Synth√®ses Intelligentes")
    
    with st.sidebar:
        st.markdown("### üìä Statistiques")
        if hasattr(st.session_state, 'history'):
            st.metric("Questions", len(st.session_state.history))
        
        st.markdown("---")
        st.success("‚úÖ Vraies synth√®ses\n‚úÖ Pas de copier-coller\n‚úÖ Reformulation intelligente")
        
        if st.button("üóëÔ∏è Effacer historique"):
            st.session_state.history = []
            st.rerun()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üí¨ Votre question")
        
        default_value = ""
        if 'selected_example' in st.session_state:
            default_value = st.session_state.selected_example
            del st.session_state.selected_example
        
        query = st.text_area(
            "Question :",
            value=default_value,
            height=80,
            placeholder="Ex: R√©el ou mensualis√© pour les devis ?",
            key="query_input"
        )
        
        if st.button("üîç Rechercher", type="primary", use_container_width=True):
            if query:
                with st.spinner("üß† Analyse et synth√®se..."):
                    results = st.session_state.assistant.search_pages(query)
                    
                    if results:
                        answer, pages = st.session_state.assistant.synthesize_answer(query, results)
                        
                        st.session_state.history.append({
                            'timestamp': datetime.now().isoformat(),
                            'query': query,
                            'answer': answer,
                            'pages': pages
                        })
                        st.session_state.assistant.save_history()
                        
                        st.session_state.current_answer = answer
                        st.session_state.current_pages = pages
                    else:
                        st.warning("Aucun r√©sultat.")
        
        if 'current_answer' in st.session_state and st.session_state.current_answer:
            st.markdown("---")
            st.markdown('<div class="answer-box">', unsafe_allow_html=True)
            st.markdown(st.session_state.current_answer)
            
            if 'current_pages' in st.session_state:
                st.markdown("\n**üìç Sources :**")
                for page in st.session_state.current_pages[:3]:
                    st.markdown(f'<span class="page-ref">Page {page}</span>', unsafe_allow_html=True)
            
            st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üéØ Exemples")
        
        examples = [
            "R√©el ou mensualis√© pour les devis ?",
            "C'est quoi l'AICI ?",
            "Comment cr√©er un devis ?",
            "Comment faire un appariement ?"
        ]
        
        for ex in examples:
            if st.button(f"üí° {ex}", key=f"ex_{hashlib.md5(ex.encode()).hexdigest()[:8]}"):
                st.session_state.selected_example = ex
                st.rerun()

if __name__ == "__main__":
    main()
